pub fn coordinate_converter(coord: &str) -> Result<(i32, i32), ()> {
    let mut all : Vec<char> = Vec::new();
    for i in 0..coord.len() {
        all.push(coord.chars().nth(i).unwrap());
    }

    let mut variables : Vec<char> = Vec::new();
    for i in 0..all.len() {
        if all[i] == 'A' || all[i] == 'B' || all[i] == 'C' || all[i] == 'D' || all[i] == 'E' 
        || all[i] == 'F' || all[i] == 'G' || all[i] == 'H' || all[i] == 'I' || all[i] == 'J'
        ||   all[i] == 'a' || all[i] == 'b' || all[i] == 'c' || all[i] == 'd' || all[i] == 'e' 
        || all[i] == 'f' || all[i] == 'g' || all[i] == 'h' || all[i] == 'i' || all[i] == 'j'
        || all[i] == '1' || all[i] == '2' || all[i] == '3' || all[i] == '4' || all[i] == '5'
        || all[i] == '6' || all[i] == '7' || all[i] == '8' || all[i] == '9' || all[i] == '0' {
            variables.push(all[i]);
        }
    }
    let mut num: i32 = -1;
    if variables.len() != 2 && variables.len() != 3 {
        return Err(());
    }
    if variables.len() == 3 {
        if variables[1] == '1' && variables[2] == '0' {
            num = 10 -1;
        } else if variables[1] == '0' {
            match variables[2] {
                '1' => num = 1-1,
                '2' => num = 2-1,
                '3' => num = 3-1,
                '4' => num = 4-1,
                '5' => num = 5-1,
                '6' => num = 6-1,
                '7' => num = 7-1,
                '8' => num = 8-1,
                '9' => num = 9-1,
                _ => return Err(())
            }
        } else {
            return Err(());
        }
    } else {
        match variables[1] {
            '1' => num = 1-1,
            '2' => num = 2-1,
            '3' => num = 3-1,
            '4' => num = 4-1,
            '5' => num = 5-1,
            '6' => num = 6-1,
            '7' => num = 7-1,
            '8' => num = 8-1,
            '9' => num = 9-1,
            _ => return Err(())
        }
    }

    // for i in 0..variables.len() {
    //     println!("{}", variables[i]);
    // }

    let mut letter: i32;

    match variables[0] {
        'a' | 'A' => letter = 0,
        'b' | 'B' => letter = 1,
        'c' | 'C' => letter = 2,
        'd' | 'D' => letter = 3,
        'e' | 'E' => letter = 4,
        'f' | 'F' => letter = 5,
        'g' | 'G' => letter = 6,
        'h' | 'H' => letter = 7,
        'i' | 'I' => letter = 8,
        'j' | 'J' => letter = 9,
        _ => return Err(())
    }

    println!("Letter coordinate: {} => {}", variables[0], letter);
    println!("number coordinate: {} => {}", num+1, num);

    return Ok((letter, num));
}
